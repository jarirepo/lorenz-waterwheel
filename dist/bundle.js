/*! For license information please see bundle.js.LICENSE */
!function(n){var e={};function s(r){if(e[r])return e[r].exports;var t=e[r]={i:r,l:!1,exports:{}};return n[r].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=n,s.c=e,s.d=function(r,t,n){s.o(r,t)||Object.defineProperty(r,t,{enumerable:!0,get:n})},s.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},s.t=function(t,r){if(1&r&&(t=s(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var e in t)s.d(n,e,function(r){return t[r]}.bind(null,e));return n},s.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return s.d(t,"a",t),t},s.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)},s.p="",s(s.s="./src/main.js")}({"./src/bucket.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bucket\", function() { return Bucket; });\n/* harmony import */ var _droplet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./droplet */ \"./src/droplet.js\");\n\r\n\r\nconst { cos, sin } = Math\r\n\r\nclass Bucket {\r\n  constructor(wheel, radius, height, capacity, theta) {\r\n    this.wheel = wheel\r\n    this.theta = theta          // angular position relative to the wheel\r\n    this.capacity = capacity    // max number of droplets\r\n    this.droplets = new Array()\r\n    this.radius = radius\r\n    this.height = height\r\n    this.ang = 0\r\n    this.x = 0\r\n    this.y = 0\r\n    this.level = 0              // height of water column\r\n    this.update()\r\n  }\r\n\r\n  update() {\r\n    this.ang = this.wheel.theta + this.theta\r\n    this.x = this.wheel.x + this.wheel.radius * cos(this.ang)\r\n    this.y = this.wheel.y + this.wheel.radius * sin(this.ang)    \r\n  }\r\n\r\n  _updateLevel() {\r\n    const p = this.droplets.length / this.capacity\r\n    this.level = p * this.height\r\n  }\r\n\r\n  addDroplet(d) {\r\n    if (!this.isFull()) {\r\n      d.stuck = true\r\n      this.droplets.push(d)\r\n      this._updateLevel()  \r\n    }\r\n  }\r\n\r\n  isFull() {\r\n    return !(this.droplets.length < this.capacity)\r\n  }\r\n\r\n  removeDroplet() {\r\n    const d = this.droplets.pop()\r\n    this._updateLevel()      \r\n    return d\r\n  }\r\n\r\n  render(ctx) {\r\n    ctx.setTransform(1, 0, 0, 1, this.x, this.y)\r\n\r\n    ctx.fillStyle = 'rgba(0,200,0,0.5)'\r\n    ctx.fillRect(-this.radius, -this.height / 2, 2 * this.radius, this.height)\r\n    \r\n    if (this.droplets.length > 0) {\r\n      // draw water in the bucket\r\n      ctx.beginPath()\r\n      ctx.fillStyle = '#0000ff'\r\n      ctx.rect(-this.radius, this.height / 2 - this.level, 2 * this.radius, this.level)\r\n      ctx.fill()\r\n    }\r\n    \r\n    ctx.beginPath()\r\n    ctx.strokeStyle = '#00cc00'\r\n    ctx.lineWidth = 1\r\n    ctx.moveTo(-this.radius - 4, -this.height / 2)\r\n    ctx.lineTo(-this.radius, -this.height / 2)\r\n    ctx.lineTo(-this.radius, this.height / 2)\r\n    ctx.lineTo(this.radius, this.height / 2)\r\n    ctx.lineTo(this.radius, -this.height / 2)\r\n    ctx.lineTo(this.radius + 4, -this.height / 2)\r\n    ctx.stroke()\r\n    \r\n\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/bucket.js?")},"./src/droplet.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Droplet\", function() { return Droplet; });\nconst { PI, random } = Math\r\nconst TWO_PI = 2 * PI\r\n\r\nclass Droplet {\r\n  constructor(x, y, mass) {\r\n    this.mass = mass\r\n    this.pos0 = {x: x, y: y} \r\n    this.pos = {x: x, y: y}\r\n    this.vel = {x: 0, y: 0}\r\n    this.acc = {x: 0, y: 0}\r\n    this.force = {x: 0, y: 0}\r\n    this.stuck = false\r\n  }\r\n\r\n  reset() {\r\n    this.pos.x = this.pos0.x\r\n    this.pos.y = this.pos0.y\r\n    this.vel.x = 0\r\n    this.vel.y = 0\r\n    this.acc.x = 0\r\n    this.acc.y = 0\r\n    this.force.x = 0\r\n    this.force.y = 0\r\n    this.stuck = false\r\n  }\r\n\r\n  applyForce(fx, fy) {\r\n    this.force.x += fx\r\n    this.force.y += fy\r\n  }\r\n\r\n  update(dt) {\r\n    this.acc.x = this.force.x / this.mass\r\n    this.acc.y = this.force.y / this.mass\r\n    this.pos.x += this.vel.x * dt + this.acc.x * dt * dt / 2\r\n    this.pos.y += this.vel.y * dt + this.acc.y * dt * dt / 2\r\n    this.vel.x += this.acc.x * dt\r\n    this.vel.y += this.acc.y * dt\r\n    this.force.x = 0\r\n    this.force.y = 0 \r\n  }\r\n\r\n  render(ctx) {\r\n    if (this.stuck) { return }\r\n    ctx.beginPath()\r\n    ctx.fillStyle = 'rgba(0,0,255,1.0)'\r\n    ctx.arc(this.pos.x, this.pos.y, 2, 0, TWO_PI)\r\n    ctx.fill()\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/droplet.js?")},"./src/main.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _simulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simulation */ \"./src/simulation.js\");\n\r\n\r\nconst canvas = document.getElementById('simulation')\r\nconst ctx = canvas.getContext('2d')\r\nctx.globalAlpha = 0.8\r\n\r\nconst sim = new _simulation__WEBPACK_IMPORTED_MODULE_0__[\"Simulation\"]({\r\n  canvas: canvas,\r\n  timestep: 0.01,\r\n  gravity: 200,\r\n  x: canvas.width / 2,\r\n  y: canvas.height / 2,\r\n  wheelRadius: 150,\r\n  momentOfInertia: 200,\r\n  numBuckets: 11,\r\n  dropletPeriod: 1000,\r\n  dropletMass: 0.01,\r\n  numDroplets: 50,\r\n  bucketRadius: 20,\r\n  bucketHeight: 40,\r\n  bucketCapacity: 10\r\n})\r\n\r\nlet lastTime\r\nlet accumulator = 0\r\nlet totalTime = 0\r\nlet omega = []\r\nconst N = 1000\r\n\r\nfunction draw(time = 0) {\r\n  ctx.fillStyle = '#000'\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n  if (time > 0) {\r\n    accumulator += time - lastTime\r\n    while (accumulator >= 10) {\r\n      accumulator -= 10\r\n      totalTime += 10\r\n      sim.update()\r\n    }\r\n    // save angular velocity for display\r\n    if (omega.length < N) {\r\n      omega.push({t: totalTime, value: sim.wheel.omega})\r\n    }else {\r\n      omega.splice(0, 1)\r\n    }\r\n    sim.render(ctx)\r\n\r\n    // output omega\r\n    if (sim.started && omega.length > 1) {\r\n      const t0 = omega[0].t\r\n      ctx.setTransform(1, 0, 0, -1, 10, canvas.height / 2)\r\n      ctx.beginPath()\r\n      ctx.lineWidth = 2\r\n      ctx.strokeStyle = 'rgba(0,255,200,0.25)'\r\n      ctx.moveTo(0, 40 * omega[0].value)\r\n      for (let i = 1; i < omega.length; i++) {\r\n        ctx.lineTo((omega[i].t - t0) / 50, 40 * omega[i].value)\r\n      }\r\n      ctx.stroke()\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n    }\r\n  }\r\n  lastTime = time\r\n\r\n  requestAnimationFrame(draw)\r\n}\r\n\r\nwindow.onload = () => {\r\n  const b = document.getElementById('start').addEventListener('click', () => {\r\n    sim.start()\r\n  })\r\n}\r\ndraw()\r\n\n\n//# sourceURL=webpack:///./src/main.js?")},"./src/simulation.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Simulation", function() { return Simulation; });\n/* harmony import */ var _wheel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wheel */ "./src/wheel.js");\n/* harmony import */ var _droplet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./droplet */ "./src/droplet.js");\n\r\n\r\n\r\nconst { cos, PI, pow, random, sin, sqrt } = Math\r\n\r\nclass Simulation {\r\n  constructor(options) {\r\n    this.options = options\r\n    this.wheel = new _wheel__WEBPACK_IMPORTED_MODULE_0__["Wheel"](options)\r\n    this.started = false\r\n    this._timer = null    // droplet timer\r\n    this.droplets = new Array()\r\n    this.data = new Array()  // past values for the angular velocity    \r\n  }\r\n\r\n  start() {\r\n    if (this.started) { return }\r\n    this.started = true\r\n    // console.log(\'Simulation started\')\r\n    // generate droplets\r\n    this._timer = setInterval(() => {\r\n      if (this.droplets.length < this.options.numDroplets) {\r\n        const x = this.options.canvas.width / 2 - 10 + 20 * random()\r\n        this.droplets.push(new _droplet__WEBPACK_IMPORTED_MODULE_1__["Droplet"](x, 0, this.options.dropletMass))\r\n      }\r\n    }, this.options.dropletPeriod)\r\n  }\r\n\r\n  update() {\r\n    if (!this.started) { return }\r\n\r\n    // update droplets\r\n    this.droplets.forEach(d => {\r\n      if (!d.stuck) {\r\n        d.applyForce(0, d.mass * this.options.gravity)\r\n        d.update(this.options.timestep)  \r\n        // check if this droplet got stuck in a bucket\r\n        this.wheel.buckets.forEach(b => {\r\n          /*if (d.pos.x > b.x - b.radius && d.pos.x < b.x + b.radius && \r\n              d.pos.y > b.y - b.height / 2 && d.pos.y < b.y + b.height / 2) {\r\n              b.addDroplet(d)\r\n          }*/\r\n          // this takes into account the current water column level\r\n          if (d.pos.x > b.x - b.radius && d.pos.x < b.x + b.radius && \r\n            d.pos.y > b.y - b.height / 2 && d.pos.y < b.y + b.height / 2) {\r\n            if (b.level > 0) {\r\n              if (d.pos.y > b.y + b.height / 2 - b.level) {\r\n                b.addDroplet(d)\r\n              }\r\n            }else {\r\n              b.addDroplet(d)\r\n            }\r\n          }        \r\n        })\r\n      }\r\n    })\r\n\r\n    this.wheel.buckets.forEach(b => {\r\n\r\n      // release a droplet\r\n      if (b.droplets.length > 0) {\r\n        let release = false\r\n        if (b.isFull()) {\r\n          release = true\r\n        }else {\r\n          const p = 0.1 * b.droplets.length / b.capacity\r\n          release = random() < p\r\n        }\r\n        if (release) {\r\n          const d = b.removeDroplet()\r\n          d.pos.x = b.x - 5 + 10 * random()\r\n          d.pos.y = b.y + b.height / 2 + 1\r\n          d.vel.x = 0\r\n          d.vel.y = 0\r\n          d.stuck = false\r\n        }\r\n      }\r\n      // apply torque from this bucket\r\n      if (b.droplets.length > 1) {\r\n        const m = b.droplets.reduce((sum, d) => d.mass)\r\n        const F = m * this.options.gravity\r\n        const L = this.wheel.radius * cos(this.wheel.theta + b.theta)\r\n        const torque = F * L\r\n        this.wheel.applyTorque(torque)  \r\n      }\r\n    })\r\n    this.wheel.update(this.options.timestep)\r\n\r\n    // remove off-screen droplets and put them \r\n    for (let i = this.droplets.length - 1; i >= 0; i--) {\r\n      const d = this.droplets[i]\r\n      if (!d.stuck) {\r\n        if (d.pos.x < 0 || \r\n            d.pos.y < 0 || \r\n            d.pos.x > this.options.canvas.width || \r\n            d.pos.y > this.options.canvas.height) {\r\n          // this.droplets.splice(i, 1)\r\n          d.reset()\r\n          // this.droplets.unshift(d)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render(ctx) {\r\n    this.wheel.render(ctx)\r\n    this.droplets.forEach(d => d.render(ctx))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/simulation.js?')},"./src/wheel.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Wheel", function() { return Wheel; });\n/* harmony import */ var _bucket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bucket */ "./src/bucket.js");\n\r\n\r\nconst { PI } = Math\r\nconst TWO_PI = 2 * PI\r\n\r\nclass Wheel {\r\n  constructor(options) {\r\n    this.x = options.x\r\n    this.y = options.y\r\n    this.radius = options.wheelRadius\r\n    this.momentOfInertia = options.momentOfInertia\r\n    this.numBuckets = options.numBuckets\r\n    this.theta = 0  // angular position (radians)\r\n    this.omega = 0  // angular velocity (rad/s)\r\n    this.alpha = 0  // angular acceleration (rad/s^2)\r\n    this.torque = 0\r\n    this.buckets = new Array()\r\n    this._createBuckets(options)\r\n  }\r\n\r\n  applyTorque(t) {\r\n    this.torque += t\r\n  }\r\n\r\n  update(dt) {\r\n    this.alpha = this.torque / this.momentOfInertia\r\n    this.theta += this.omega * dt + this.alpha * dt * dt / 2\r\n    this.omega += this.alpha * dt\r\n    this.torque = 0\r\n    \r\n    this.buckets.forEach(b => b.update())\r\n  }\r\n\r\n  render(ctx) {\r\n    // wheel\r\n    ctx.beginPath()\r\n    ctx.fillStyle = \'#333\'\r\n    ctx.arc(this.x, this.y, 10, 0, TWO_PI)\r\n    ctx.fill()\r\n\r\n    ctx.beginPath()\r\n    ctx.strokeStyle = \'#333\'\r\n    ctx.lineWidth = 2\r\n    ctx.arc(this.x, this.y, this.radius, 0, TWO_PI)\r\n    ctx.stroke()\r\n    // buckets\r\n    this.buckets.forEach(b => {\r\n      b.render(ctx)\r\n    })\r\n  }\r\n\r\n  _createBuckets(options) {\r\n    const n = this.numBuckets\r\n    for (let i = 0; i < n; i++) {\r\n      const b = new _bucket__WEBPACK_IMPORTED_MODULE_0__["Bucket"](this, \r\n        options.bucketRadius, \r\n        options.bucketHeight,\r\n        options.bucketCapacity,\r\n        -PI / 2 - PI / 72 + i / n * TWO_PI)\r\n      this.buckets.push(b)\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/wheel.js?')}});